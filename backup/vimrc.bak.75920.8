" Install vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin()
"" grab color schemes first
"" this part will probably be deprecated or commented out when I settle
Plug 'mhartington/oceanic-next'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'ciaranm/inkpot'
Plug 'jacoborus/tender.vim'
Plug 'jnurmine/Zenburn'
"Plug 'chriskempson/base16-vim'
Plug 'sjl/badwolf'
Plug 'morhetz/gruvbox'
"Plug 'jcherven/jummidark.vim'
"" Navbar
Plug 'vim-airline/vim-airline'	   		  " A status bar plugin
Plug 'vim-airline/vim-airline-themes'   " Themes for status bar
Plug 'tpope/vim-fugitive'               " needed for git branch display
Plug 'neoclide/coc.nvim', {'branch': 'release'} " key plugin for completion
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " search function
Plug 'jremmen/vim-ripgrep'				     	" some kind of searcher?
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'          " super comments
Plug 'ryanoasis/vim-devicons'           " filetype glyphs for some vim plugins
Plug 'tpope/vim-surround'               " seems to implement some tag or bracket adding shortcuts
Plug 'vimwiki/vimwiki'                  " wiki
Plug 'jceb/vim-orgmode'                 " orgmode
Plug 'bronson/vim-trailing-whitespace'
Plug 'ying17zi/vim-live-latex-preview'
Plug 'vim-syntastic/syntastic'          " syntax checker (needs config)
Plug 'chrisbra/unicode.vim'				" unicode searcher
"Plug 'mattn/emmet-vim'                 " Expands abbreviations
"Plug 'metakirby5/codi.vim'             " scratchpad, auto-evaluates code
"Plug 'ervandew/supertab'
"Plug 'wikitopian/hardmode'

call plug#end()

"" Settings
syntax enable
colorscheme badwolf
filetype plugin indent on
set encoding=UTF-8
set guifont=Anonymice\ Nerd\ Font,\ Regular
set number
set relativenumber
set ignorecase
set ruler
set autoindent
set tabstop=4
set softtabstop=0
set shiftwidth=4
set shiftround
set noexpandtab
set copyindent
set preserveindent
set colorcolumn=80
highlight ColorColumn ctermbg=0
set wrap
set linebreak
set autochdir
set backup
set writebackup
set backupcopy=yes
set list lcs=tab:\:\ 

"" meaningful backups
au BufWrite * call mkdir("./.vim-backup", "p", 0700)
set backupdir=./.vim-backup
au BufWritePre * let &bex = '@' . strftime("%F.%H%M")

"" Keymaps
nmap <C-n> :NERDTreeToggle<CR>
map <C-Up> :m -2<CR>
map <C-k> :m -2<CR>
map <C-Down> :m +1<CR>
map <C-j> :m +1<CR>
" the following section remaps d to delete instead of cut, and
" c to cut, and x to delete instead of cutting one character
"nnoremap d "_d
"nnoremap c d
"nnoremap C D
"vnoremap c d
"nnoremap x "_x
nmap <C-_>   <Plug>NERDCommenterToggle
vmap <C-_>   <Plug>NERDCommenterToggle<CR>gv

"" Airline config
let g:airline_theme='base16'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

"" coc.nvim tab binding
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

"" Watch vimrc for auto-refresh
"" from https://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END
